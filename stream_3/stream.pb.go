// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: stream_3/stream.gw

package stream_3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_3_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stream_3_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_stream_3_stream_proto_rawDescGZIP(), []int{0}
}

func (x *GetUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *UserDTO `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetUserResponse) Reset() {
	*x = GetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_3_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse) ProtoMessage() {}

func (x *GetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stream_3_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return file_stream_3_stream_proto_rawDescGZIP(), []int{1}
}

func (x *GetUserResponse) GetUser() *UserDTO {
	if x != nil {
		return x.User
	}
	return nil
}

type UserDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UserDTO) Reset() {
	*x = UserDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_3_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDTO) ProtoMessage() {}

func (x *UserDTO) ProtoReflect() protoreflect.Message {
	mi := &file_stream_3_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDTO.ProtoReflect.Descriptor instead.
func (*UserDTO) Descriptor() ([]byte, []int) {
	return file_stream_3_stream_proto_rawDescGZIP(), []int{2}
}

func (x *UserDTO) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_stream_3_stream_proto protoreflect.FileDescriptor

var file_stream_3_stream_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x33, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x31, 0x22,
	0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x36, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x54, 0x4f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x2d, 0x0a, 0x07, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x94, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x42, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x09, 0x5a, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x31, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_stream_3_stream_proto_rawDescOnce sync.Once
	file_stream_3_stream_proto_rawDescData = file_stream_3_stream_proto_rawDesc
)

func file_stream_3_stream_proto_rawDescGZIP() []byte {
	file_stream_3_stream_proto_rawDescOnce.Do(func() {
		file_stream_3_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_stream_3_stream_proto_rawDescData)
	})
	return file_stream_3_stream_proto_rawDescData
}

var file_stream_3_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_stream_3_stream_proto_goTypes = []interface{}{
	(*GetUserRequest)(nil),  // 0: proto1.GetUserRequest
	(*GetUserResponse)(nil), // 1: proto1.GetUserResponse
	(*UserDTO)(nil),         // 2: proto1.UserDTO
}
var file_stream_3_stream_proto_depIdxs = []int32{
	2, // 0: proto1.GetUserResponse.user:type_name -> proto1.UserDTO
	0, // 1: proto1.User.GetUserList:input_type -> proto1.GetUserRequest
	0, // 2: proto1.User.GetUserByStream:input_type -> proto1.GetUserRequest
	1, // 3: proto1.User.GetUserList:output_type -> proto1.GetUserResponse
	1, // 4: proto1.User.GetUserByStream:output_type -> proto1.GetUserResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_stream_3_stream_proto_init() }
func file_stream_3_stream_proto_init() {
	if File_stream_3_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stream_3_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_3_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_3_stream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stream_3_stream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stream_3_stream_proto_goTypes,
		DependencyIndexes: file_stream_3_stream_proto_depIdxs,
		MessageInfos:      file_stream_3_stream_proto_msgTypes,
	}.Build()
	File_stream_3_stream_proto = out.File
	file_stream_3_stream_proto_rawDesc = nil
	file_stream_3_stream_proto_goTypes = nil
	file_stream_3_stream_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	//one req and stream resp.
	GetUserList(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (User_GetUserListClient, error)
	//stream req and stream resp.
	GetUserByStream(ctx context.Context, opts ...grpc.CallOption) (User_GetUserByStreamClient, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUserList(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (User_GetUserListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_User_serviceDesc.Streams[0], "/proto1.User/GetUserList", opts...)
	if err != nil {
		return nil, err
	}
	x := &userGetUserListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type User_GetUserListClient interface {
	Recv() (*GetUserResponse, error)
	grpc.ClientStream
}

type userGetUserListClient struct {
	grpc.ClientStream
}

func (x *userGetUserListClient) Recv() (*GetUserResponse, error) {
	m := new(GetUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) GetUserByStream(ctx context.Context, opts ...grpc.CallOption) (User_GetUserByStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_User_serviceDesc.Streams[1], "/proto1.User/GetUserByStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userGetUserByStreamClient{stream}
	return x, nil
}

type User_GetUserByStreamClient interface {
	Send(*GetUserRequest) error
	Recv() (*GetUserResponse, error)
	grpc.ClientStream
}

type userGetUserByStreamClient struct {
	grpc.ClientStream
}

func (x *userGetUserByStreamClient) Send(m *GetUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userGetUserByStreamClient) Recv() (*GetUserResponse, error) {
	m := new(GetUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	//one req and stream resp.
	GetUserList(*GetUserRequest, User_GetUserListServer) error
	//stream req and stream resp.
	GetUserByStream(User_GetUserByStreamServer) error
}

// UnimplementedUserServer can be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (*UnimplementedUserServer) GetUserList(*GetUserRequest, User_GetUserListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (*UnimplementedUserServer) GetUserByStream(User_GetUserByStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserByStream not implemented")
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_GetUserList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).GetUserList(m, &userGetUserListServer{stream})
}

type User_GetUserListServer interface {
	Send(*GetUserResponse) error
	grpc.ServerStream
}

type userGetUserListServer struct {
	grpc.ServerStream
}

func (x *userGetUserListServer) Send(m *GetUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _User_GetUserByStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).GetUserByStream(&userGetUserByStreamServer{stream})
}

type User_GetUserByStreamServer interface {
	Send(*GetUserResponse) error
	Recv() (*GetUserRequest, error)
	grpc.ServerStream
}

type userGetUserByStreamServer struct {
	grpc.ServerStream
}

func (x *userGetUserByStreamServer) Send(m *GetUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userGetUserByStreamServer) Recv() (*GetUserRequest, error) {
	m := new(GetUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto1.User",
	HandlerType: (*UserServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserList",
			Handler:       _User_GetUserList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserByStream",
			Handler:       _User_GetUserByStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream_3/stream.gw",
}
